
print('###########################################')
print('########## Test.sh is Working ############')
print('###########################################')

import numpy as np 
import sys,os
import cv2
import pandas as pd
from utils import *

if __name__ == '__main__':
     # Parse arguments.
     if len(sys.argv) != 3:
         raise Exception('Include the data folder as argument, e.g., python Trainer.py training_Data')
     root_test_data = sys.argv[1]
     root_sol = sys.argv[2]

     root_dir = os.path.join(root_test_data) 
     root_solutions = os.path.join(root_sol) 

     print("Accessed to testing data ", root_dir)
     

     # Load data paths
     training_images = []   # images png + jpg
     img_ann = []        # images annotations
    
     videos = []         # videos
     videos_ann = []     # videos annotations
     video_frames = []   # video frames
     video_frames_ann=[] # video frames annotations

     for root, dirs, files in os.walk(root_dir, topdown=True):
         for name in files:
             print(name)
             
             path = os.path.join(root, name)            
             if '.png' in path  and 'images' in path:
                 training_images.append(path)
                 print(path)
             if '.jpg' in path  and 'images' in path:
                 training_images.append(path)
             if '.txt' in path and 'images' in path:
                 img_ann.append(path)
             if '.mov' in path and 'videos' in path:
                 videos.append(path)
             if '.csv' in path and 'videos' in path:
                 videos_ann.append(path)
             if '.jpg' in path and 'videos-frames' in path:
                 video_frames.append(path)
             if '.csv' in path and 'videos-frames' in path: #TODO: CHECK ANNOTATIONS
                 video_frames_ann.append(path)
   
     print('Image training instances: ', len(training_images))
     print('videos training instances: ', len(videos))
     print('video_frames evaluation instances: ', len(video_frames))
     print(video_frames_ann)
     

     #---------------------FEATURE EXTRACTION--------------------------------------------
     i = 0
    # Training with images 
     Num_features = 1
     feat_names = ['Polygon'] # TODO: EXTRACT TRIPLETS HERE!
     train_size = len(training_images)
     final = []

     data_train = []# np.zeros((train_size, Num_features+1), dtype=np.float32)
    #data_test = np.zeros((test_size, Num_features+1), dtype=np.float32)
     for path in training_images:
         print('    {}/{}...'.format(i+1, len(training_images)))
         data_train.append(feature_extraction(path, 2))
 
         i = i+1
         # Extract id_name from image
         id_img = path[len(path) - 10:len(path)]
         # Add id + triplets + geoms
         row_str = ",".join(map(str, data_train))
         file1 = open("./solution/images/annotations/solutions.csv","a")
         #file1 = open("solutions.csv","a")
         file1.write(row_str + " \n")
         file1.close()
